{"ast":null,"code":"var _jsxFileName = \"/Users/mozzy/national-parks-web-app/client/src/AllParks.js\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AllParks() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [park, setParks] = useState([]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"https://developer.nps.gov/api/v1/parks?&api_key=gUeSemHr93mXuKE5WqakVIaO2cDN67aqXettWyDE\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setParks(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 14\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 14\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: park.map((park, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: park.fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: park.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: park.parkCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: park.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: park.activities\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: park.url,\n            children: park.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(AllParks, \"WUrc3bP1eIx/o5VgKSbrJrCFG7g=\");\n\n_c = AllParks;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllParks\");","map":{"version":3,"sources":["/Users/mozzy/national-parks-web-app/client/src/AllParks.js"],"names":["AllParks","error","setError","useState","isLoaded","setIsLoaded","park","setParks","useEffect","fetch","then","res","json","result","message","map","index","fullName","description","parkCode","url","activities"],"mappings":";;;;;AAAA,SAASA,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BF,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACG,IAAD,EAAOC,QAAP,IAAmBJ,QAAQ,CAAC,EAAD,CAAjC,CAHgB,CAKhB;AACA;AACA;;AACAK,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAAC,0FAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVR,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACM,MAAD,CAAR;AACD,KANL,EAOI;AACA;AACA;AACCZ,IAAAA,KAAD,IAAW;AACTI,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAH,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIA,KAAJ,EAAW;AACT,wBAAO;AAAA,4BAAaA,KAAK,CAACa,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACV,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACE;AAAA,gBACEE,IAAI,CAACS,GAAL,CAAS,CAACT,IAAD,EAAOU,KAAP,KAAiB;AACzB,4BAAQ;AAAA,kCACP;AAAA,sBAAMV,IAAI,CAACW;AAAX;AAAA;AAAA;AAAA;AAAA,kBADO,eAEP;AAAA,sBAAOX,IAAI,CAACY;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAFO,eAGP;AAAA,sBAAOZ,IAAI,CAACa;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAHO,eAIP;AAAA,sBAAOb,IAAI,CAACc;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAJO,eAKP;AAAA,sBAAKd,IAAI,CAACe;AAAV;AAAA;AAAA;AAAA;AAAA,kBALO,eAMP;AAAG,YAAA,IAAI,EAAEf,IAAI,CAACc,GAAd;AAAA,sBAAqBd,IAAI,CAACc;AAA1B;AAAA;AAAA;AAAA;AAAA,kBANO;AAAA,WAASJ,KAAT;AAAA;AAAA;AAAA;AAAA,gBAAR;AAQF,OATC;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;AACF;;GA9CMhB,Q;;KAAAA,Q","sourcesContent":["function AllParks() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [park, setParks] = useState([]);\n  \n    // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n    useEffect(() => {\n      fetch(\"https://developer.nps.gov/api/v1/parks?&api_key=gUeSemHr93mXuKE5WqakVIaO2cDN67aqXettWyDE\")\n        .then(res => res.json())\n        .then(\n          (result) => {\n            setIsLoaded(true);\n            setParks(result);\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n    }, [])\n  \n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <ul>\n        { park.map((park, index) => {\n           return (<li key={index}>\n            <h2>{ park.fullName }</h2>\n            <div>{ park.description }</div>\n            <div>{ park.parkCode }</div>\n            <div>{ park.url }</div>\n            <p>{ park.activities }</p>\n            <a href={park.url}>{ park.url }</a>\n           </li> )\n        })}\n    </ul>\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}