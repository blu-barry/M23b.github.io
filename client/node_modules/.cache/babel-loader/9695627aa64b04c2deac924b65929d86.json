{"ast":null,"code":"import _slicedToArray from\"/Users/mozzy/Public/Project Repos/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';var useFetch=function useFetch(url){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),isPending=_useState4[0],setIsPending=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),error=_useState6[0],setError=_useState6[1];useEffect(function(){var abortCont=new AbortController();setTimeout(function(){fetch(url,{signal:abortCont.signal}).then(function(res){if(!res.ok){throw Error('could not fetch data for given resource');}return res.json();}).then(function(data){setData(data);setIsPending(false);setError(null);}).catch(function(err){if(err.name==='AbortError'){console.log('fetch aborted');}setIsPending(false);setError(err.message);});// Note: it's important to handle errors here\n// instead of a catch() block so that we don't swallow\n// exceptions from actual bugs in components.\n},1000);return function(){return abortCont.abort();};},[url]);return{data:data,isPending:isPending,error:error};};export default useFetch;","map":{"version":3,"sources":["/Users/mozzy/Public/Project Repos/client/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"mappings":"2HACA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,GAAD,CAAS,CACtB,cAAwBH,QAAQ,CAAC,IAAD,CAAhC,wCAAOI,IAAP,eAAaC,OAAb,eACA,eAAkCL,QAAQ,CAAC,IAAD,CAA1C,yCAAOM,SAAP,eAAkBC,YAAlB,eACA,eAA0BP,QAAQ,CAAC,IAAD,CAAlC,yCAAOQ,KAAP,eAAcC,QAAd,eAEAR,SAAS,CAAC,UAAO,CACb,GAAMS,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,EAAlB,CAEAC,UAAU,CAAC,UAAM,CACbC,KAAK,CAACV,GAAD,CAAM,CAAEW,MAAM,CAAEJ,SAAS,CAACI,MAApB,CAAN,CAAL,CACKC,IADL,CACU,SAAAC,GAAG,CAAI,CACT,GAAG,CAACA,GAAG,CAACC,EAAR,CAAY,CACR,KAAMC,CAAAA,KAAK,CAAC,yCAAD,CAAX,CACH,CACD,MAAOF,CAAAA,GAAG,CAACG,IAAJ,EAAP,CACH,CANL,EAOKJ,IAPL,CAOU,SAAAX,IAAI,CAAI,CACVC,OAAO,CAACD,IAAD,CAAP,CACAG,YAAY,CAAC,KAAD,CAAZ,CACAE,QAAQ,CAAC,IAAD,CAAR,CACH,CAXL,EAYKW,KAZL,CAYW,SAAAC,GAAG,CAAI,CACV,GAAIA,GAAG,CAACC,IAAJ,GAAa,YAAjB,CAA+B,CAC3BC,OAAO,CAACC,GAAR,CAAY,eAAZ,EACH,CACDjB,YAAY,CAAC,KAAD,CAAZ,CACAE,QAAQ,CAACY,GAAG,CAACI,OAAL,CAAR,CACH,CAlBL,EAmBI;AACA;AACA;AACP,CAvBS,CAuBP,IAvBO,CAAV,CAyBA,MAAO,kBAAMf,CAAAA,SAAS,CAACgB,KAAV,EAAN,EAAP,CACH,CA7BQ,CA6BN,CAACvB,GAAD,CA7BM,CAAT,CA+BA,MAAO,CAAEC,IAAI,CAAJA,IAAF,CAAQE,SAAS,CAATA,SAAR,CAAmBE,KAAK,CAALA,KAAnB,CAAP,CACH,CArCD,CAwCA,cAAeN,CAAAA,QAAf","sourcesContent":["\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() =>  {\n        const abortCont = new AbortController();\n        \n        setTimeout(() => {\n            fetch(url, { signal: abortCont.signal })\n                .then(res => {\n                    if(!res.ok) {\n                        throw Error('could not fetch data for given resource');\n                    }\n                    return res.json();\n                })\n                .then(data => {\n                    setData(data);\n                    setIsPending(false);\n                    setError(null);\n                })\n                .catch(err => {\n                    if (err.name === 'AbortError') {\n                        console.log('fetch aborted');\n                    }\n                    setIsPending(false);\n                    setError(err.message);\n                })\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n        }, 1000);\n\n        return () => abortCont.abort();\n    }, [url]);\n    \n    return { data, isPending, error }\n}\n\n\nexport default useFetch;\n    "]},"metadata":{},"sourceType":"module"}