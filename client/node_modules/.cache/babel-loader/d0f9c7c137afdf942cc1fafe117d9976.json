{"ast":null,"code":"var _jsxFileName = \"/Users/mozzy/national-parks-web-app/client/src/MultiSelectAll.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactMultiSelectCheckboxes from \"react-multiselect-checkboxes\";\nimport options from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultiSelectAll = () => {\n  _s();\n\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  useEffect(() => {\n    setSelectedOptions([{\n      label: \"All\",\n      value: \"*\"\n    }, ...options]);\n  }, []);\n\n  function getDropdownButtonLabel(_ref) {\n    let {\n      placeholderButtonLabel,\n      value\n    } = _ref;\n\n    if (value && value.some(o => o.value === \"*\")) {\n      return `${placeholderButtonLabel}: All`;\n    } else {\n      return `${placeholderButtonLabel}: ${value.length} selected`;\n    }\n  }\n\n  function onChange(value, event) {\n    if (event.action === \"select-option\" && event.option.value === \"*\") {\n      this.setState(this.options);\n    } else if (event.action === \"deselect-option\" && event.option.value === \"*\") {\n      this.setState([]);\n    } else if (event.action === \"deselect-option\") {\n      this.setState(value.filter(o => o.value !== \"*\"));\n    } else if (value.length === this.options.length - 1) {\n      this.setState(this.options);\n    } else {\n      this.setState(value);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(ReactMultiSelectCheckboxes, {\n    options: [{\n      label: \"All\",\n      value: \"*\"\n    }, ...options],\n    placeholderButtonLabel: \"Colors\",\n    getDropdownButtonLabel: getDropdownButtonLabel,\n    value: selectedOptions,\n    onChange: onChange,\n    setState: setSelectedOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MultiSelectAll, \"eXSMZvzPhxwJQuJJpsBwhexgXVA=\");\n\n_c = MultiSelectAll;\nexport default MultiSelectAll;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectAll\");","map":{"version":3,"sources":["/Users/mozzy/national-parks-web-app/client/src/MultiSelectAll.js"],"names":["React","useState","useEffect","ReactMultiSelectCheckboxes","options","MultiSelectAll","selectedOptions","setSelectedOptions","label","value","getDropdownButtonLabel","placeholderButtonLabel","some","o","length","onChange","event","action","option","setState","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,0BAAP,MAAuC,8BAAvC;AAEA,OAAOC,OAAP,MAAoB,QAApB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,EAAD,CAAtD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,kBAAkB,CAAC,CAAC;AAAEC,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KAAD,EAA+B,GAAGL,OAAlC,CAAD,CAAlB;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASM,sBAAT,OAAmE;AAAA,QAAnC;AAAEC,MAAAA,sBAAF;AAA0BF,MAAAA;AAA1B,KAAmC;;AACjE,QAAIA,KAAK,IAAIA,KAAK,CAACG,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACJ,KAAF,KAAY,GAA9B,CAAb,EAAiD;AAC/C,aAAQ,GAAEE,sBAAuB,OAAjC;AACD,KAFD,MAEO;AACL,aAAQ,GAAEA,sBAAuB,KAAIF,KAAK,CAACK,MAAO,WAAlD;AACD;AACF;;AAED,WAASC,QAAT,CAAkBN,KAAlB,EAAyBO,KAAzB,EAAgC;AAC9B,QAAIA,KAAK,CAACC,MAAN,KAAiB,eAAjB,IAAoCD,KAAK,CAACE,MAAN,CAAaT,KAAb,KAAuB,GAA/D,EAAoE;AAClE,WAAKU,QAAL,CAAc,KAAKf,OAAnB;AACD,KAFD,MAEO,IACLY,KAAK,CAACC,MAAN,KAAiB,iBAAjB,IACAD,KAAK,CAACE,MAAN,CAAaT,KAAb,KAAuB,GAFlB,EAGL;AACA,WAAKU,QAAL,CAAc,EAAd;AACD,KALM,MAKA,IAAIH,KAAK,CAACC,MAAN,KAAiB,iBAArB,EAAwC;AAC7C,WAAKE,QAAL,CAAcV,KAAK,CAACW,MAAN,CAAcP,CAAD,IAAOA,CAAC,CAACJ,KAAF,KAAY,GAAhC,CAAd;AACD,KAFM,MAEA,IAAIA,KAAK,CAACK,MAAN,KAAiB,KAAKV,OAAL,CAAaU,MAAb,GAAsB,CAA3C,EAA8C;AACnD,WAAKK,QAAL,CAAc,KAAKf,OAAnB;AACD,KAFM,MAEA;AACL,WAAKe,QAAL,CAAcV,KAAd;AACD;AACF;;AAED,sBACE,QAAC,0BAAD;AACE,IAAA,OAAO,EAAE,CAAC;AAAED,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KAAD,EAA+B,GAAGL,OAAlC,CADX;AAEE,IAAA,sBAAsB,EAAC,QAFzB;AAGE,IAAA,sBAAsB,EAAEM,sBAH1B;AAIE,IAAA,KAAK,EAAEJ,eAJT;AAKE,IAAA,QAAQ,EAAES,QALZ;AAME,IAAA,QAAQ,EAAER;AANZ;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA1CD;;GAAMF,c;;KAAAA,c;AA4CN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMultiSelectCheckboxes from \"react-multiselect-checkboxes\";\n\nimport options from \"./data\";\n\nconst MultiSelectAll = () => {\n  const [selectedOptions, setSelectedOptions] = useState([]);\n\n  useEffect(() => {\n    setSelectedOptions([{ label: \"All\", value: \"*\" }, ...options]);\n  }, []);\n\n  function getDropdownButtonLabel({ placeholderButtonLabel, value }) {\n    if (value && value.some((o) => o.value === \"*\")) {\n      return `${placeholderButtonLabel}: All`;\n    } else {\n      return `${placeholderButtonLabel}: ${value.length} selected`;\n    }\n  }\n\n  function onChange(value, event) {\n    if (event.action === \"select-option\" && event.option.value === \"*\") {\n      this.setState(this.options);\n    } else if (\n      event.action === \"deselect-option\" &&\n      event.option.value === \"*\"\n    ) {\n      this.setState([]);\n    } else if (event.action === \"deselect-option\") {\n      this.setState(value.filter((o) => o.value !== \"*\"));\n    } else if (value.length === this.options.length - 1) {\n      this.setState(this.options);\n    } else {\n      this.setState(value);\n    }\n  }\n\n  return (\n    <ReactMultiSelectCheckboxes\n      options={[{ label: \"All\", value: \"*\" }, ...options]}\n      placeholderButtonLabel=\"Colors\"\n      getDropdownButtonLabel={getDropdownButtonLabel}\n      value={selectedOptions}\n      onChange={onChange}\n      setState={setSelectedOptions}\n    />\n  );\n};\n\nexport default MultiSelectAll;\n"]},"metadata":{},"sourceType":"module"}