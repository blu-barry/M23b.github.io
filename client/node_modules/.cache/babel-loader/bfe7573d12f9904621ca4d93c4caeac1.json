{"ast":null,"code":"var _jsxFileName = \"/Users/mozzy/national-parks-web-app/client/src/Webcams.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport useFetch from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Webcams = _ref => {\n  _s();\n\n  let {\n    parkCode\n  } = _ref;\n  const {\n    data: webcam,\n    isPending,\n    error\n  } = useFetch('https://developer.nps.gov/api/v1/webcams?parkCode=' + parkCode + '&api_key=gUeSemHr93mXuKE5WqakVIaO2cDN67aqXettWyDE'); //console.log(parks);\n  //const parks = data;\n  //const [Activities, setActivities] = useState([]);\n\n  /*const handleActivitySearch = (activity) => {\n      const newParks = parks.filter(park => park.activities !== activity);\n      setParks(newParks);\n  }*/\n\n  console.log(webcam);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ParksList\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Park Webcams\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 24\n    }, this), isPending && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 28\n    }, this), webcam && webcam.data.images.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: require(image.url),\n        alt: \"cannot display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Webcams, \"3a62GOwX73quUFi9PYQN8naejn0=\", false, function () {\n  return [useFetch];\n});\n\n_c = Webcams;\nexport default Webcams;\n\nvar _c;\n\n$RefreshReg$(_c, \"Webcams\");","map":{"version":3,"sources":["/Users/mozzy/national-parks-web-app/client/src/Webcams.js"],"names":["React","ReactDOM","useFetch","Webcams","parkCode","data","webcam","isPending","error","console","log","images","map","image","require","url"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,OAAO,GAAG,QAAoB;AAAA;;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AAChC,QAAM;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,SAAhB;AAA2BC,IAAAA;AAA3B,MAAqCN,QAAQ,CAAC,uDAAqDE,QAArD,GAA8D,mDAA/D,CAAnD,CADgC,CAEhC;AACA;AACA;;AAEA;AACJ;AACA;AACA;;AACIK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAEME,KAAK,iBAAI;AAAA,gBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,YAFf,EAGMD,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHnB,EAIMD,MAAM,IACJA,MAAM,CAACD,IAAP,CAAYM,MAAZ,CAAmBC,GAAnB,CAAwBC,KAAD,iBACnB;AAAA,6BACA;AAAK,QAAA,GAAG,EAAEC,OAAO,CAACD,KAAK,CAACE,GAAP,CAAjB;AAA8B,QAAA,GAAG,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADJ,CALR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAzBD;;GAAMZ,O;UACyCD,Q;;;KADzCC,O;AA2BN,eAAeA,OAAf","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport useFetch from \"./useFetch\";\n\nconst Webcams = ( { parkCode } ) => {\n    const { data: webcam, isPending, error } = useFetch('https://developer.nps.gov/api/v1/webcams?parkCode='+parkCode+'&api_key=gUeSemHr93mXuKE5WqakVIaO2cDN67aqXettWyDE');\n    //console.log(parks);\n    //const parks = data;\n    //const [Activities, setActivities] = useState([]);\n\n    /*const handleActivitySearch = (activity) => {\n        const newParks = parks.filter(park => park.activities !== activity);\n        setParks(newParks);\n    }*/\n    console.log(webcam)\n    return (  \n        <div className=\"ParksList\">\n        <h2>Park Webcams</h2>\n            { error && <div>{ error }</div> }\n            { isPending && <div>Loading...</div> }\n            { webcam && (\n                webcam.data.images.map((image)=>(\n                    <div>\n                    <img src={require(image.url)} alt=\"cannot display\"/>\n                    </div>\n                ))\n            )}\n        </div>\n    );\n}\n \nexport default Webcams;"]},"metadata":{},"sourceType":"module"}