{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(url).then(res => {\n        if (!res.ok) {\n          throw Error('could not fetch data for given resource');\n        }\n\n        return res.json();\n      }).then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      }).catch(err => {\n        setIsPending(false);\n        setError(err.message);\n      }); // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n    }, 1000);\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/mozzy/national-parks-web-app/client/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","setTimeout","fetch","then","res","ok","Error","json","catch","err","message"],"mappings":";;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAGAC,EAAAA,SAAS,CAAC,MAAO;AACbS,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACR,GAAD,CAAL,CACCS,IADD,CACMC,GAAG,IAAI;AACT,YAAG,CAACA,GAAG,CAACC,EAAR,EAAY;AACR,gBAAMC,KAAK,CAAC,yCAAD,CAAX;AACH;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,OAND,EAOCJ,IAPD,CAOMR,IAAI,IAAI;AACVG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAK,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACC,OAXL,EAYCQ,KAZD,CAYOC,GAAG,IAAI;AACVX,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAACS,GAAG,CAACC,OAAL,CAAR;AACH,OAfD,EADa,CAiBb;AACA;AACA;AACH,KApBS,EAoBP,IApBO,CAAV;AAqBH,GAtBQ,EAsBN,CAAChB,GAAD,CAtBM,CAAT;AAuBA,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CA9BD;;GAAMN,Q;;AAiCN,eAAeA,QAAf","sourcesContent":["\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n\n    useEffect(() =>  {\n        setTimeout(() => {\n            fetch(url)\n            .then(res => {\n                if(!res.ok) {\n                    throw Error('could not fetch data for given resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                setIsPending(false);\n                setData(data);\n                setError(null);\n                })\n            .catch(err => {\n                setIsPending(false);\n                setError(err.message);\n            })\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n        }, 1000);\n    }, [url]);\n    return {data, isPending, error}\n}\n\n\nexport default useFetch;\n    "]},"metadata":{},"sourceType":"module"}