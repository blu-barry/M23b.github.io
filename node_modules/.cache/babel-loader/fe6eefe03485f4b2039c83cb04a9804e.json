{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          throw Error('could not fetch data for given resource');\n        }\n\n        return res.json();\n      }).then(data => {\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        }\n\n        setIsPending(false);\n        setError(err.message);\n      }); // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n    }, 1000);\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/mozzy/national-parks-web-app/client/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"mappings":";;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAO;AACb,UAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACV,GAAD,EAAM;AAAEW,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAApB,OAAN,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,YAAG,CAACA,GAAG,CAACC,EAAR,EAAY;AACR,gBAAMC,KAAK,CAAC,yCAAD,CAAX;AACH;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,OANL,EAOKJ,IAPL,CAOUX,IAAI,IAAI;AACVC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAXL,EAYKW,KAZL,CAYWC,GAAG,IAAI;AACV,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC3BC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH;;AACDjB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAACY,GAAG,CAACI,OAAL,CAAR;AACH,OAlBL,EADa,CAoBT;AACA;AACA;AACP,KAvBS,EAuBP,IAvBO,CAAV;AAyBA,WAAO,MAAMf,SAAS,CAACgB,KAAV,EAAb;AACH,GA7BQ,EA6BN,CAACvB,GAAD,CA7BM,CAAT;AA+BA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CArCD;;GAAMN,Q;;AAwCN,eAAeA,QAAf","sourcesContent":["\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() =>  {\n        const abortCont = new AbortController();\n        \n        setTimeout(() => {\n            fetch(url, { signal: abortCont.signal })\n                .then(res => {\n                    if(!res.ok) {\n                        throw Error('could not fetch data for given resource');\n                    }\n                    return res.json();\n                })\n                .then(data => {\n                    setData(data);\n                    setIsPending(false);\n                    setError(null);\n                })\n                .catch(err => {\n                    if (err.name === 'AbortError') {\n                        console.log('fetch aborted');\n                    }\n                    setIsPending(false);\n                    setError(err.message);\n                })\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n        }, 1000);\n\n        return () => abortCont.abort();\n    }, [url]);\n    \n    return { data, isPending, error }\n}\n\n\nexport default useFetch;\n    "]},"metadata":{},"sourceType":"module"}